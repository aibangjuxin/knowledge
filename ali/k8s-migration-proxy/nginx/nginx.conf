# Nginx基础配置文件
# Base Nginx configuration file

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 加载动态模块
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # 基本设置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format migration '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'backend="$target_backend" '
                        'upstream_response_time=$upstream_response_time '
                        'request_time=$request_time';
    
    # 访问日志
    access_log /var/log/nginx/access.log main;
    
    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # 客户端设置
    client_max_body_size 100m;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 代理设置
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    
    # Lua设置
    lua_package_path "/etc/nginx/lua/?.lua;;";
    lua_shared_dict migration_stats 10m;
    
    # 初始化Lua
    init_by_lua_block {
        math.randomseed(ngx.time())
    }
    
    # 健康检查服务器
    server {
        listen 8080;
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /metrics {
            access_log off;
            content_by_lua_block {
                -- 简单的指标输出
                ngx.header.content_type = "text/plain"
                ngx.say("# HELP nginx_up Nginx is up")
                ngx.say("# TYPE nginx_up gauge")
                ngx.say("nginx_up 1")
            }
        }
        
        location /status {
            access_log off;
            content_by_lua_block {
                ngx.header.content_type = "application/json"
                ngx.say('{"status": "ok", "timestamp": ' .. ngx.time() .. '}')
            }
        }
    }
    
    # 包含动态生成的配置
    include /etc/nginx/conf.d/*.conf;
}