# 阿里云 Kubernetes 集群迁移 TODO 清单

## 当前状态
- ✅ 资源已迁移到新集群
- ✅ 健康检查脚本已完成 (verify-e2e.sh, k8s-resources.sh)
- ✅ 基础设施代码已准备 (k8s-migration-proxy)

## 🔥 紧急优先级 (切换前必须完成)

### 1. 预切换验证 (Pre-Switch Validation)
- [ ] **完整的端到端测试**
  - [ ] 运行 `./verify-e2e.sh -n <new-namespace>` 验证所有 Ingress URLs
  - [ ] 验证所有 Readiness Probe URLs 响应正常
  - [ ] 测试所有关键业务流程 (登录、支付、核心API等)
  - [ ] 验证数据库连接和外部服务依赖

- [ ] **资源配置验证**
  - [ ] 运行 `./k8s-resources.sh -n <new-namespace>` 检查资源配置
  - [ ] 确保所有容器都有合适的 CPU/Memory limits 和 requests
  - [ ] 验证 HPA (Horizontal Pod Autoscaler) 配置
  - [ ] 检查 PVC (Persistent Volume Claims) 和存储

- [ ] **网络和安全验证**
  - [ ] 验证 NetworkPolicy 配置
  - [ ] 测试服务间通信 (Service Mesh 如果使用)
  - [ ] 验证 RBAC 权限配置
  - [ ] 检查 Secret 和 ConfigMap 迁移完整性

### 2. 流量切换准备 (Traffic Switch Preparation)
- [ ] **DNS 准备**
  - [ ] 准备 DNS 记录更新脚本 (基于 ali-dns/ 目录)
  - [ ] 降低 DNS TTL 到最小值 (如 60s)
  - [ ] 准备回滚 DNS 配置

- [ ] **负载均衡器配置**
  - [ ] 配置新集群的 SLB/ALB
  - [ ] 验证 SSL 证书配置
  - [ ] 测试健康检查配置

- [ ] **监控和告警**
  - [ ] 部署监控系统 (Prometheus/Grafana)
  - [ ] 配置关键指标告警
  - [ ] 设置日志聚合 (ELK/Loki)
  - [ ] 准备实时监控仪表板

## 🚀 高优先级 (切换期间)

### 3. 渐进式切换策略 (Progressive Migration)
- [ ] **金丝雀发布 (Canary Deployment)**
  - [ ] 使用 k8s-migration-proxy 实现流量分流
  - [ ] 配置 5% -> 20% -> 50% -> 100% 的流量切换
  - [ ] 每个阶段观察 15-30 分钟

- [ ] **实时监控**
  - [ ] 监控错误率、延迟、吞吐量
  - [ ] 监控资源使用率 (CPU/Memory/Network)
  - [ ] 监控业务关键指标

- [ ] **快速回滚准备**
  - [ ] 准备一键回滚脚本
  - [ ] 测试回滚流程 (< 5 分钟完成)
  - [ ] 准备紧急联系人列表

### 4. 数据一致性验证 (Data Consistency)
- [ ] **数据库状态检查**
  - [ ] 验证数据库连接池配置
  - [ ] 检查数据库事务和锁
  - [ ] 验证缓存一致性 (Redis/Memcached)

- [ ] **文件存储验证**
  - [ ] 验证对象存储访问 (OSS/S3)
  - [ ] 检查文件上传/下载功能
  - [ ] 验证 CDN 配置

## 📊 中优先级 (切换后优化)

### 5. 性能优化 (Performance Optimization)
- [ ] **资源调优**
  - [ ] 基于实际负载调整 CPU/Memory 配置
  - [ ] 优化 HPA 配置
  - [ ] 调整 JVM 参数 (如果使用 Java)

- [ ] **网络优化**
  - [ ] 优化服务发现配置
  - [ ] 调整连接池大小
  - [ ] 优化 Ingress Controller 配置

### 6. 安全加固 (Security Hardening)
- [ ] **访问控制**
  - [ ] 审查和更新 RBAC 配置
  - [ ] 实施最小权限原则
  - [ ] 配置 Pod Security Standards

- [ ] **网络安全**
  - [ ] 实施 NetworkPolicy
  - [ ] 配置服务网格安全策略
  - [ ] 启用 mTLS (如果适用)

### 7. 运维自动化 (Operations Automation)
- [ ] **CI/CD 更新**
  - [ ] 更新部署流水线指向新集群
  - [ ] 配置自动化测试
  - [ ] 更新镜像仓库配置

- [ ] **备份和恢复**
  - [ ] 配置 etcd 备份
  - [ ] 设置应用数据备份
  - [ ] 测试灾难恢复流程

## 🔧 低优先级 (长期优化)

### 8. 成本优化 (Cost Optimization)
- [ ] **资源优化**
  - [ ] 分析资源使用模式
  - [ ] 实施 Spot 实例 (如果适用)
  - [ ] 优化存储类型和大小

- [ ] **自动化扩缩容**
  - [ ] 配置 Cluster Autoscaler
  - [ ] 实施 Vertical Pod Autoscaler
  - [ ] 配置定时扩缩容

### 9. 可观测性增强 (Observability Enhancement)
- [ ] **分布式追踪**
  - [ ] 部署 Jaeger/Zipkin
  - [ ] 配置应用追踪
  - [ ] 分析性能瓶颈

- [ ] **日志分析**
  - [ ] 优化日志格式和级别
  - [ ] 配置日志告警规则
  - [ ] 实施日志分析自动化

### 10. 文档和知识传递 (Documentation & Knowledge Transfer)
- [ ] **运维文档**
  - [ ] 更新运维手册
  - [ ] 编写故障排查指南
  - [ ] 记录最佳实践

- [ ] **团队培训**
  - [ ] Kubernetes 运维培训
  - [ ] 新集群架构培训
  - [ ] 应急响应流程培训

## 📋 切换检查清单 (Switch Checklist)

### 切换前 2 小时
- [ ] 通知所有相关团队
- [ ] 确认监控系统正常
- [ ] 验证回滚脚本可用
- [ ] 检查新集群资源充足

### 切换前 30 分钟
- [ ] 最后一次端到端测试
- [ ] 确认数据库连接正常
- [ ] 检查外部依赖服务状态
- [ ] 准备切换脚本

### 切换期间
- [ ] 执行渐进式流量切换
- [ ] 实时监控关键指标
- [ ] 记录切换过程和问题
- [ ] 保持团队沟通畅通

### 切换后 2 小时
- [ ] 验证所有服务正常
- [ ] 检查业务关键功能
- [ ] 监控错误日志
- [ ] 确认性能指标正常

## 🚨 应急预案 (Emergency Plans)

### 回滚触发条件
- [ ] 错误率 > 5%
- [ ] 响应时间 > 平时 2 倍
- [ ] 关键业务功能异常
- [ ] 数据库连接异常

### 回滚步骤
1. [ ] 立即停止新流量
2. [ ] 切换 DNS 回旧集群
3. [ ] 验证旧集群服务正常
4. [ ] 通知相关团队
5. [ ] 分析问题原因

## 📞 联系人信息
- **技术负责人**: [姓名] [电话] [微信]
- **运维负责人**: [姓名] [电话] [微信]
- **业务负责人**: [姓名] [电话] [微信]
- **DBA**: [姓名] [电话] [微信]

## 📝 相关脚本和工具
- `./verify-e2e.sh -n <namespace>` - 端到端健康检查
- `./k8s-resources.sh -n <namespace>` - 资源配置检查
- `./ali-dns/dns-batch-update.sh` - DNS 批量更新
- `./k8s-migration-proxy/` - 流量分流代理
- `./migrate-plan/` - 迁移计划和脚本

---
**注意**: 
1. 建议在非业务高峰期进行切换
2. 每个步骤都要有验证和回滚方案
3. 保持团队沟通，及时记录问题和解决方案
4. 切换完成后持续监控至少 24 小时

**最后更新**: $(date)
**负责人**: [你的名字]



# parted2

系统部署迁移工作安排
会议讨论了系统部署和迁移过程中的多项任务安排、技术问题及资源准备工作，具体如下：
- **PPD修改与部署**：
  - **路径修改**：要在脚本里修改PPD的image路径，将三个环境的department source准备好，说话人1后续会进行审核。
  - **部署规划**：先完成Infra set up，再进行batch migration，通过脚本将API从Max OS下载、推到jar并在ZK class中启动。
- **生产环境变更**：
  - **权限问题**：做production change时使用CR audit较麻烦，考虑不用提报，用pipeline封装调脚本的方式实现，后续再确定具体方案。
  - **时间安排**：提前完成准备工作，避免在release当天进行耗时操作，可分批执行脚本。
- **人员任务分配**：
  - **雅各布任务**：让雅各布查看文档，负责SaaS box安装和call box连通调试等工作。
  - **杨富富任务评估**：评估杨富富可承担的工作，如HK环境的Infra setup和pipeline相关工作，但不确定其上手no give的速度。
  - **Henry任务**：国庆后继续进行脚本开发，导出相关信息，在新的UK dev厂设置all translation Hub Redis，对比pop前后的FQDN的response code并排查问题。
- **技术问题与优化**：
  - **数据传输**：使用新工具可快速传输API，提前传输能节省时间，提高效率。
  - **流量切换**：开发DS切换脚本，实现老平台到新平台的流量切换，在切换前创建local的DS作为准备工作。
  - **状态校验**：增加verify步骤，在部署完成和切换DNS后，检查状态码、TLS等信息，确保系统正常运行。
  - **证书管理**：记录申请的长域名证书，在不用时删除，避免后续review麻烦。
  - **脚本导出问题**：导出脚本时，对default namespace下的资源处理存在问题，需评估影响后决定是否修改，说话人3将进行探索。
- **文档记录与共享**：
  - **文档存放**：将相关记录整理到CAP01新工程的setup页面或face one的infra setup中。
  - **信息共享**：说话人1将分享相关文档和表格，说话人3将分享命令和脚本供Henry参考。