#!/opt/homebrew/bin/node

const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs').promises;
const execAsync = promisify(exec);

class NotesManager {
  async executeAppleScript(script) {
    try {
      const { stdout, stderr } = await execAsync(`osascript -e '${script}'`);
      if (stderr) console.error('AppleScript error:', stderr);
      return stdout.trim();
    } catch (error) {
      console.error('Error executing AppleScript:', error.message);
      return null;
    }
  }

  async searchNotes(query) {
    const script = `tell application "Notes" to return name of every note whose name contains "${query}" or body contains "${query}"`;
    
    const result = await this.executeAppleScript(script);
    if (result) {
      console.log('üîç Search Results:');
      const notes = result.split(', ').filter(note => note.trim());
      notes.forEach((note, index) => {
        console.log(`${index + 1}. ${note.trim()}`);
      });
      console.log(`\nFound ${notes.length} note(s) containing "${query}"`);
    }
    return result;
  }

  async createNote(title, body = '') {
    const script = `tell application "Notes" to make new note with properties {name:"${title}", body:"${body}"}`;
    
    const result = await this.executeAppleScript(script);
    if (result) {
      console.log(`‚úÖ Note created: "${title}"`);
    }
    return result;
  }

  async createNoteFromFile(title, filePath) {
    try {
      const content = await fs.readFile(filePath, 'utf8');
      // ËΩ¨‰πâÂÜÖÂÆπ‰∏≠ÁöÑÂºïÂè∑
      const escapedContent = content.replace(/"/g, '\\"').replace(/\n/g, '\\n');
      const script = `tell application "Notes" to make new note with properties {name:"${title}", body:"${escapedContent}"}`;
      
      const result = await this.executeAppleScript(script);
      if (result) {
        console.log(`‚úÖ Note created from file: "${title}"`);
      }
      return result;
    } catch (error) {
      console.error(`‚ùå Error reading file ${filePath}:`, error.message);
      return null;
    }
  }

  async listNotes(limit = 20) {
    const script = `tell application "Notes" to return name of every note`;
    
    const result = await this.executeAppleScript(script);
    if (result) {
      console.log(`üìù Notes List:`);
      const notes = result.split(', ').slice(0, limit);
      notes.forEach((note, index) => {
        console.log(`${index + 1}. ${note.trim()}`);
      });
      if (result.split(', ').length > limit) {
        console.log(`... and ${result.split(', ').length - limit} more notes`);
      }
    }
    return result;
  }

  async getNoteContent(noteTitle) {
    const script = `tell application "Notes" to return body of first note whose name is "${noteTitle}"`;
    
    const result = await this.executeAppleScript(script);
    if (result) {
      console.log(`üìÑ Content of "${noteTitle}":`);
      console.log('‚îÄ'.repeat(50));
      console.log(result);
      console.log('‚îÄ'.repeat(50));
    }
    return result;
  }

  async editNote(noteTitle, newBody) {
    const escapedBody = newBody.replace(/"/g, '\\"').replace(/\n/g, '\\n');
    const script = `tell application "Notes" to set body of first note whose name is "${noteTitle}" to "${escapedBody}"`;
    
    const result = await this.executeAppleScript(script);
    if (result !== null) {
      console.log(`‚úÖ Note updated: "${noteTitle}"`);
    }
    return result;
  }

  async deleteNote(noteTitle) {
    const script = `tell application "Notes" to delete first note whose name is "${noteTitle}"`;
    
    const result = await this.executeAppleScript(script);
    if (result !== null) {
      console.log(`üóëÔ∏è Note deleted: "${noteTitle}"`);
    }
    return result;
  }

  async exportNote(noteTitle, outputPath) {
    const content = await this.executeAppleScript(`tell application "Notes" to return body of first note whose name is "${noteTitle}"`);
    if (content) {
      try {
        await fs.writeFile(outputPath, content);
        console.log(`‚úÖ Note exported to: ${outputPath}`);
      } catch (error) {
        console.error(`‚ùå Error writing file:`, error.message);
      }
    }
  }
}

async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  const notesManager = new NotesManager();

  switch (command) {
    case 'search':
    case 's':
      if (args[1]) {
        await notesManager.searchNotes(args[1]);
      } else {
        console.log('Usage: notes-cli search <query>');
      }
      break;

    case 'create':
    case 'c':
      if (args[1]) {
        const title = args[1];
        const body = args.slice(2).join(' ');
        await notesManager.createNote(title, body);
      } else {
        console.log('Usage: notes-cli create <title> [body]');
      }
      break;

    case 'create-from-file':
    case 'cf':
      if (args[1] && args[2]) {
        await notesManager.createNoteFromFile(args[1], args[2]);
      } else {
        console.log('Usage: notes-cli create-from-file <title> <file-path>');
      }
      break;

    case 'export':
    case 'e':
      if (args[1] && args[2]) {
        await notesManager.exportNote(args[1], args[2]);
      } else {
        console.log('Usage: notes-cli export <note-title> <output-path>');
      }
      break;

    case 'edit':
      if (args[1] && args[2]) {
        const title = args[1];
        const newBody = args.slice(2).join(' ');
        await notesManager.editNote(title, newBody);
      } else {
        console.log('Usage: notes-cli edit <title> <new-body>');
      }
      break;

    case 'list':
    case 'l':
      const limit = args[1] ? parseInt(args[1]) : 20;
      await notesManager.listNotes(limit);
      break;

    case 'get':
    case 'g':
      if (args[1]) {
        await notesManager.getNoteContent(args[1]);
      } else {
        console.log('Usage: notes-cli get <title>');
      }
      break;

    case 'delete':
    case 'd':
      if (args[1]) {
        console.log(`‚ö†Ô∏è  Delete "${args[1]}"? (y/N)`);
        process.stdin.setRawMode(true);
        process.stdin.resume();
        process.stdin.on('data', async (key) => {
          if (key.toString().toLowerCase() === 'y') {
            await notesManager.deleteNote(args[1]);
          } else {
            console.log('‚ùå Deletion cancelled');
          }
          process.exit();
        });
      } else {
        console.log('Usage: notes-cli delete <title>');
      }
      break;

    default:
      console.log(`
üçé Apple Notes CLI Tool

Usage:
  notes-cli search|s <query>           - Search notes by title or content
  notes-cli create|c <title> [body]    - Create a new note
  notes-cli create-from-file|cf <title> <file> - Create note from file
  notes-cli export|e <title> <file>    - Export note to file
  notes-cli edit <title> <new-body>    - Edit existing note
  notes-cli list|l [limit]             - List notes (default: 20)
  notes-cli get|g <title>              - Get content of specific note
  notes-cli delete|d <title>           - Delete a note (with confirmation)

Examples:
  notes-cli search "English"
  notes-cli create "Meeting Notes" "Discussed VPC architecture"
  notes-cli create-from-file "Code Snippet" ./script.js
  notes-cli list 10
  notes-cli get "Meeting Notes"
      `);
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = NotesManager;