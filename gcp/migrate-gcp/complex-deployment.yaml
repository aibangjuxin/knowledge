apiVersion: apps/v1
kind: Deployment
metadata:
  name: complex-web-app
  namespace: lex
  labels:
    app: complex-web-app
    tier: frontend
    version: v1.2.3
spec:
  replicas: 3
  selector:
    matchLabels:
      app: complex-web-app
  template:
    metadata:
      labels:
        app: complex-web-app
        tier: frontend
        version: v1.2.3
    spec:
      serviceAccountName: web-service-account
      nodeSelector:
        kubernetes.io/os: linux
        node-type: web-tier
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - complex-web-app
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "web-tier"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: nginx-frontend
        image: nginx:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
        livenessProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /startup
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: database-url
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        - name: static-content
          mountPath: /usr/share/nginx/html
        - name: cache-volume
          mountPath: /var/cache/nginx
        - name: logs-volume
          mountPath: /var/log/nginx
      - name: redis-cache
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          readOnlyRootFilesystem: false
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 2
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis
          readOnly: true
      - name: monitoring-sidecar
        image: prom/node-exporter:latest
        imagePullPolicy: Always
        ports:
        - name: metrics
          containerPort: 9100
          protocol: TCP
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: true
          privileged: false
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9100
          initialDelaySeconds: 10
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /
            port: 9100
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
      initContainers:
      - name: init-database
        image: busybox:1.35
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'echo "Initializing database..." && sleep 10']
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "20m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
      - name: init-cache
        image: alpine:latest
        imagePullPolicy: Always
        command: ['sh', '-c', 'echo "Setting up cache..." && sleep 5']
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "20m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
          defaultMode: 0644
      - name: static-content
        persistentVolumeClaim:
          claimName: static-content-pvc
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 500Mi
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
      - name: redis-config
        configMap:
          name: redis-config
      - name: proc
        hostPath:
          path: /proc
          type: Directory
      - name: sys
        hostPath:
          path: /sys
          type: Directory
      imagePullSecrets:
      - name: registry-secret
      - name: gcr-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0

---
apiVersion: v1
kind: Service
metadata:
  name: complex-web-app-service
  namespace: lex
  labels:
    app: complex-web-app
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  - name: metrics
    port: 9100
    targetPort: 9100
    protocol: TCP
  selector:
    app: complex-web-app

---
apiVersion: v1
kind: Service
metadata:
  name: complex-web-app-nodeport
  namespace: lex
  labels:
    app: complex-web-app
    service-type: nodeport
spec:
  type: NodePort
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30080
    protocol: TCP
  selector:
    app: complex-web-app

---
apiVersion: v1
kind: Service
metadata:
  name: complex-web-app-headless
  namespace: lex
  labels:
    app: complex-web-app
    service-type: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: complex-web-app

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: complex-web-app-hpa
  namespace: lex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: complex-web-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: lex
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /ready {
            access_log off;
            return 200 "ready\n";
            add_header Content-Type text/plain;
        }
        
        location /startup {
            access_log off;
            return 200 "started\n";
            add_header Content-Type text/plain;
        }
        
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: lex
data:
  redis.conf: |
    maxmemory 100mb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: lex
type: Opaque
data:
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAZGF0YWJhc2U6NTQzMi9teWRi # postgresql://user:password@database:5432/mydb

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: lex
type: Opaque
data:
  password: cmVkaXNwYXNzd29yZDEyMw== # redispassword123

---
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: lex
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnY3IuaW8iOnsidXNlcm5hbWUiOiJfanNvbl9rZXkiLCJwYXNzd29yZCI6InNlY3JldCIsImF1dGgiOiJYMnB6YjI1ZmEyVjVPbk5sWTNKbGRBPT0ifX19

---
apiVersion: v1
kind: Secret
metadata:
  name: gcr-secret
  namespace: lex
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJ1cy5nY3IuaW8iOnsidXNlcm5hbWUiOiJfanNvbl9rZXkiLCJwYXNzd29yZCI6InNlY3JldCIsImF1dGgiOiJYMnB6YjI1ZmEyVjVPbk5sWTNKbGRBPT0ifX19

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: web-service-account
  namespace: lex
imagePullSecrets:
- name: registry-secret
- name: gcr-secret
secrets:
- name: app-secrets

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: static-content-pvc
  namespace: lex
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: lex
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 2Gi

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: complex-web-app-netpol
  namespace: lex
spec:
  podSelector:
    matchLabels:
      app: complex-web-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: load-balancer
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9100
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web-app-role
  namespace: lex
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web-app-rolebinding
  namespace: lex
subjects:
- kind: ServiceAccount
  name: web-service-account
  namespace: lex
roleRef:
  kind: Role
  name: web-app-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: complex-web-app-pdb
  namespace: lex
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: complex-web-app

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: lex-resource-quota
  namespace: lex
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    pods: "20"
    persistentvolumeclaims: "10"
    services: "10"
    secrets: "20"
    configmaps: "20"

---
apiVersion: v1
kind: LimitRange
metadata:
  name: lex-limit-range
  namespace: lex
spec:
  limits:
  - type: Container
    default:
      cpu: "200m"
      memory: "256Mi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
    max:
      cpu: "1"
      memory: "1Gi"
    min:
      cpu: "50m"
      memory: "64Mi"
  - type: Pod
    max:
      cpu: "2"
      memory: "2Gi"